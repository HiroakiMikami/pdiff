#! /usr/bin/env node

// Require modules
const commander = require("commander");
const fs = require("fs");
const readline = require("readline");
const pdiff = require('../lib/main.js');

var file1 = null;
var file2 = null;

// Parse a command line arguments
commander
  .version('0.0.1')
  .option('-l --line <num>', 'Output num (default -1) lines shown in diff', parseInt)
  .option('-c --color', 'Color mode')
  .option('-h --html', 'HTML mode')
  .arguments("<file1> <file2>")
  .action((file1_, file2_) => {
    file1 = file1_;
    file2 = file2_;
  })
  .parse(process.argv);

// Handle a corner case (when both files are stdin)
if (file1 == '-' && file2 == '-') {
  process.exit(0);
}

function readFile(path) {
  return new Promise((resolve, reject) => {
    if (path == '-') {
      // Read from stdin
      var lines = [];
      const reader = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
        terminal: false
      });
      reader.on('line', function (line) {
        lines.push(line);
      });
      reader.on('close', function () {
        resolve(lines.join("\n"));
      });
    } else {
      // TODO remove the magic number (utf8)
      fs.readFile(path, 'utf8', (err, data) => {
        if (err) reject(err);
        else resolve(data);
      })
    }
  });
}

// Read two files
Promise.all([readFile(file1), readFile(file2)]).then(
  (results) => {
    const content1 = results[0];
    const content2 = results[1];

    // Calculate diff
    const line = (commander.line == undefined) ? -1 : commander.line;
    const diff_ = pdiff.addLineNumbers(pdiff.diff(content1, content2));
    const diff = pdiff.extractDiff(diff_, line);

    // Output diff
    const maxLine = diff_.length;
    const digit = String(maxLine).length;

    if (commander.html) {
      for (group of diff) {
        for (delta of group) {
          var text = "<div class='line'>";
          // Add line numbers
          if (delta.lineNumberOfLhs != undefined) {
            text += "<span class='line-number lhs'>" + (delta.lineNumberOfLhs + 1) + "</span>"
          } else {
            text += "<span class='line-number no-lhs'></span>"
          }
          if (delta.lineNumberOfRhs != undefined) {
            text += "<span class='line-number rhs'>" + (delta.lineNumberOfRhs + 1) + "</span>"
          } else {
            text += "<span class='line-number no-rhs'></span>"
          }

          // Add the value of this line
          text += "<span class='value'>";
          for (value of delta.values) {
            if (value.added) {
              text += "<span class='added'>" + value.value + "</span>";
            } else if (value.removed) {
              text += "<span class='removed'>" + value.value + "</span>";
            } else {
              text += value.value;
            }
          }
          text += "</span>"
          text += "</div>"

          // Ouput the delta
          console.log(text);
        }

        if (i != diff.length - 1) {
          console.log("<div class='separator'></div>");
        }
      }
    } else {
      var spaces = "";
      for (var i = 0; i < digit - 1; i++) spaces += " ";

      if (commander.color) {
        for (group of diff) {
          for (delta of group) {
            var text = "";
            // Add line numbers
            if (delta.lineNumberOfLhs != undefined) {
              text += (spaces + (delta.lineNumberOfLhs + 1)).substr(-digit);
            } else {
              text += spaces + "-";
            }
            text += " ";
            if (delta.lineNumberOfRhs != undefined) {
              text += (spaces + (delta.lineNumberOfRhs + 1)).substr(-digit);
            } else {
              text += spaces + "-";
            }
            text += " ";

            // Add the value of this line
            for (value of delta.values) {
              if (value.added) {
                text += "\033[1;32m" + value.value + "\033[0m"
              } else if (value.removed) {
                text += "\033[1;31m" + value.value + "\033[0m"
              } else {
                text += value.value
              }
            }

            // Ouput the delta
            console.log(text);
          }

          if (i != diff.length - 1) {
            console.log("...");
          }
        }
      } else {
        for (group of diff) {
          for (delta of group) {
            var text = "";
            // Add line numbers
            if (delta.lineNumberOfLhs != undefined) {
              text += (spaces + (delta.lineNumberOfLhs + 1)).substr(-digit);
            } else {
              text += spaces + "-";
            }
            text += " ";
            if (delta.lineNumberOfRhs != undefined) {
              text += (spaces + (delta.lineNumberOfRhs + 1)).substr(-digit);
            } else {
              text += spaces + "-";
            }
            text += " ";

            // Add the value of this line
            for (value of delta.values) {
              if (value.added) {
                text += "{+" + value.value + "+}"
              } else if (value.removed) {
                text += "{-" + value.value + "-}"
              } else {
                text += value.value
              }
            }

            // Ouput the delta
            console.log(text);
          }

          if (i != diff.length - 1) {
            console.log("...");
          }
        }
      }
    }
  },
  (err) => {
    // Handle error
    console.error(err);
  }
)
