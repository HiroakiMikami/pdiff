#! /usr/bin/env node

// Require modules
var commander = require("commander");
var fs = require("fs");
var readline = require("readline");
var pdiff = require('../lib/main.js');

var file1 = null;
var file2 = null;

// Parse a command line arguments
commander
  .version('0.0.1')
  .option('-l --line <num>', 'Output num (default 0) lines shown in diff', parseInt)
  .option('-c --color', 'Color mode')
  .option('-h --html', 'HTML mode')
  .arguments("<file1> <file2>")
  .action(function(file1_, file2_) {
    file1 = file1_;
    file2 = file2_;
  })
  .parse(process.argv);

// Handle a corner case (when both files are stdin)
if (file1 == '-' && file2 == '-') {
  process.exit(0);
}

function readFile(path) {
  return new Promise((resolve, reject) => {
    if (path == '-') {
      // Read from stdin
      var lines = [];
      var reader = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      reader.on('line', function (line) {
        lines.push(line);
      });
      reader.on('close', function () {
        resolve(lines.join("\n"));
      });
    } else {
      // TODO remove the magic number (utf8)
      fs.readFile(path, 'utf8', (err, data) => {
        if (err) reject(err);
        else resolve(data);
      })
    }
  });
}

// Read two files
Promise.all([readFile(file1), readFile(file2)]).then(
  (results) => {
    var content1 = results[0];
    var content2 = results[1];

    // Calculate diff
    var diff_ = pdiff.diff(content1, content2);

    // Convert diff data structure to display
    // TODO this feature should be included in APIs
    var diff = [];
    var lineNumberOfLhs = 0;
    var lineNumberOfRhs = 0;
    var isInLhs = false;
    var isInRhs = false;
    var delta = null;
    for (delta_ of diff_) {
      var lines = delta_.value.split('\n');
      for (var i = 0; i < lines.length; i++) {
        var line = lines[i]

        delta = delta || {};
        delta.values = delta.values || [];


        if (!delta_.removed) {
          // delta.value is in the rhs
          isInRhs = true;
        }
        if (!delta_.added) {
          // delta.value is in the lhs
          isInLhs = true;
        }

        if (delta_.removed) {
          delta.values.push({
            removed: true,
            value: line
          });
        } else if (delta_.added){
          delta.values.push({
            added: true,
            value: line
          });
        } else {
          delta.values.push({
            value: line
          })
        }
        if ((i != lines.length - 1) || delta_.value[delta_.value.length - 1] == '\n') {
          // End a line
          if (isInRhs) {
            // delta.value is in the rhs
            delta.lineNumberOfRhs = lineNumberOfRhs;
            lineNumberOfRhs += 1;
          }
          if (isInLhs) {
            // delta.value is in the lhs
            delta.lineNumberOfLhs = lineNumberOfLhs;
            lineNumberOfLhs += 1;
          }
          diff.push(delta);

          // Initialize the local variables
          isInRhs = false;
          isInLhs = false;
          delta = null;
        }
      }
    }
    if (delta != null) {
      // Deal with a corner case (when last character of text is not \n)
      if (isInRhs) {
        // delta.value is in the rhs
        delta.lineNumberOfRhs = lineNumberOfRhs;
        lineNumberOfRhs += 1;
      }
      if (isInLhs) {
        // delta.value is in the lhs
        delta.lineNumberOfLhs = lineNumberOfLhs;
        lineNumberOfLhs += 1;
      }
      diff.push(delta);
    }

    // Output diff
    var line = (commander.line == undefined) ? 0 : commander.line;

    var maxLine = diff.length;
    var digit = String(maxLine).length;

    if (commander.html) {
      for (delta of diff) {
        var text = "<div class='line'>";
        // Add line numbers
        if (delta.lineNumberOfLhs != undefined) {
          text += "<span class='line-number lhs'>" + delta.lineNumberOfLhs + "</span>"
        } else {
          text += "<span class='line-number no-lhs'></span>"
        }
        if (delta.lineNumberOfRhs != undefined) {
          text += "<span class='line-number rhs'>" + delta.lineNumberOfRhs + "</span>"
        } else {
          text += "<span class='line-number no-rhs'></span>"
        }

        // Add the value of this line
        text += "<span class='value'>";
        for (value of delta.values) {
          if (value.added) {
            text += "<span class='added'>" + value.value + "</span>";
          } else if (value.removed) {
            text += "<span class='removed'>" + value.value + "</span>";
          } else {
            text += value.value;
          }
        }
        text += "</span>"
        text += "</div>"

        // Ouput the delta
        console.log(text);
      }
    } else {
      var spaces = "";
      for (var i = 0; i < digit - 1; i++) spaces += " ";

      if (commander.color) {
        for (delta of diff) {
          var text = "";
          // Add line numbers
          if (delta.lineNumberOfLhs != undefined) {
            text += (spaces + delta.lineNumberOfLhs).substr(-digit);
          } else {
            text += spaces + "-";
          }
          text += " ";
          if (delta.lineNumberOfRhs != undefined) {
            text += (spaces + delta.lineNumberOfRhs).substr(-digit);
          } else {
            text += spaces + "-";
          }
          text += " ";

          // ESC[30mï½žESC[37m
          // Add the value of this line
          for (value of delta.values) {
            if (value.added) {
              text += "\033[1;32m" + value.value + "\033[0m"
            } else if (value.removed) {
              text += "\033[1;31m" + value.value + "\033[0m"
            } else {
              text += value.value
            }
          }

          // Ouput the delta
          console.log(text);
        }
      } else {
        for (delta of diff) {
          var text = "";
          // Add line numbers
          if (delta.lineNumberOfLhs != undefined) {
            text += (spaces + delta.lineNumberOfLhs).substr(-digit);
          } else {
            text += spaces + "-";
          }
          text += " ";
          if (delta.lineNumberOfRhs != undefined) {
            text += (spaces + delta.lineNumberOfRhs).substr(-digit);
          } else {
            text += spaces + "-";
          }
          text += " ";

          // Add the value of this line
          for (value of delta.values) {
            if (value.added) {
              text += "{+" + value.value + "+}"
            } else if (value.removed) {
              text += "{-" + value.value + "-}"
            } else {
              text += value.value
            }
          }

          // Ouput the delta
          console.log(text);
        }
      }
    }
  },
  (err) => {
    // Handle error
    console.error(err);
  }
)
